This program inserts lexicographically increasing Strings into Maps as <String, Integer> pairs.

Enter # strings to insert into the maps: 10
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into the maps: 50
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into the maps: 1000
class ULLMap: 0.03 sec
class BSTMap: 0.03 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.00 sec

Would you like to try more timed-tests? (y/n): n

//
This program inserts random Strings of length L
into different types of maps as <String, Integer> pairs.

Please enter desired length of each string: 6

Enter # strings to insert into the maps: 1000
class ULLMap: 0.01 sec
class BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.00 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 50000
--Stack Overflow -- couldn't add 50000 strings of length 6.

class BSTMap: 9.16 sec
Java's Built-in TreeMap: 0.06 sec

Would you like to try more timed-tests? (y/n)
Enter # strings to insert into the maps: y
Please enter a positive integer: 8
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec

Would you like to try more timed-tests? (y/n)n
